import threading
from flask import Flask
import telebot
from telebot import types
import csv
from datetime import datetime

API_TOKEN = '7658197917:AAEe7pb2kjBJbrpQY75k36aXijBQlmOyklA'
ADMIN_CHAT_ID = 947914394

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_data = {}

damage_elements = [
    "–ë–∞–º–ø–µ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π", "–ö—Ä—ã–ª–æ –ø–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ", "–ö—Ä—ã–ª–æ –ø–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ",
    "–§–∞—Ä–∞ –ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è", "–§–∞—Ä–∞ –ø–µ—Ä–µ–¥–Ω—è—è –ø—Ä–∞–≤–∞—è", "–ö–∞–ø–æ—Ç",
    "–ö—Ä—ã–ª–æ –∑–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ", "–ö—Ä—ã–ª–æ –∑–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ", "–ö—Ä—ã—à–∫–∞ –±–∞–≥–∞–∂–Ω–∏–∫–∞",
    "–ó–∞–¥–Ω–µ–µ —Å—Ç–µ–∫–ª–æ", "–ó–∞–¥–Ω—è—è –ª–µ–≤–∞—è —Ñ–∞—Ä–∞", "–ó–∞–¥–Ω—è—è –ø—Ä–∞–≤–∞—è —Ñ–∞—Ä–∞",
    "–î—Ä—É–≥–æ–µ", "–ì–æ—Ç–æ–≤–æ"
]

def create_damage_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, item in enumerate(damage_elements):
        row.append(types.KeyboardButton(item))
        if len(row) == 2:
            kb.add(*row)
            row = []
    if row:
        kb.add(*row)
    return kb

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
def restart(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_data[message.chat.id]['photo'] = message.photo[-1].file_id
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")

@bot.message_handler(func=lambda msg: 'photo' in user_data.get(msg.chat.id, {}) and 'vin' not in user_data.get(msg.chat.id, {}))
def handle_vin(message):
    user_data[message.chat.id]['vin'] = message.text.strip()
    user_data[message.chat.id]['parts'] = []
    kb = create_damage_keyboard()
    kb.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in damage_elements or msg.text == "–ù–∞–∑–∞–¥")
def handle_part_selection(message):
    chat_id = message.chat.id
    selected = message.text

    if selected == "–ù–∞–∑–∞–¥":
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∞–Ω–æ–≤–æ.", reply_markup=types.ReplyKeyboardRemove())
        del user_data[chat_id]['vin']
        return

    if selected == "–ì–æ—Ç–æ–≤–æ":
        selected_parts = user_data[chat_id].get('parts', [])
        base_price = 5000
        total = base_price * len(selected_parts)
        user_data[chat_id]['total'] = total
        msg = f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ —É—â–µ—Ä–±–∞: {total} ‚ÇΩ –ø–æ –±–∞–∑–∞–º –†–°–ê (–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª.)\n\n‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω–∏–∂–µ–Ω–Ω–∞—è —Å—É–º–º–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç–∫—Å–ø–µ—Ä—Ç—É-—Ç–µ—Ö–Ω–∏–∫—É."

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
        bot.send_message(chat_id, msg)
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏?", reply_markup=markup)
        return

    if 'parts' not in user_data[chat_id]:
        user_data[chat_id]['parts'] = []

   if selected == "–î—Ä—É–≥–æ–µ":
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.")
    user_data[chat_id]['awaiting_custom_part'] = True
    return

@bot.message_handler(func=lambda msg: user_data.get(msg.chat.id, {}).get('awaiting_custom_part'))
def handle_custom_part(message):
    chat_id = message.chat.id
    part_name = message.text.strip()

    if 'parts' not in user_data[chat_id]:
        user_data[chat_id]['parts'] = []

    user_data[chat_id]['parts'].append(f"–î—Ä—É–≥–æ–µ: {part_name}")
    user_data[chat_id]['awaiting_custom_part'] = False

    bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {part_name}\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=create_damage_keyboard())
        bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {selected}\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=create_damage_keyboard())
    else:
        bot.send_message(chat_id, f"{selected} —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=create_damage_keyboard())

@bot.message_handler(func=lambda msg: msg.text.lower() in ['–¥–∞', '–Ω–µ—Ç'] and 'total' in user_data.get(msg.chat.id, {}) and 'contact_choice' not in user_data[msg.chat.id])
def handle_contact_choice(message):
    chat_id = message.chat.id
    user_data[chat_id]['contact_choice'] = message.text.lower()
    if message.text.lower() == '–¥–∞':
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.", reply_markup=types.ReplyKeyboardRemove())
        user_data.pop(chat_id, None)

@bot.message_handler(func=lambda msg: 'contact_choice' in user_data.get(msg.chat.id, {}) and user_data[msg.chat.id]['contact_choice'] == '–¥–∞' and 'name' not in user_data[msg.chat.id])
def handle_name(message):
    user_data[message.chat.id]['name'] = message.text.strip()
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda msg: 'name' in user_data.get(msg.chat.id, {}) and 'phone' not in user_data[msg.chat.id])
def handle_phone(message):
    data = user_data[message.chat.id]
    data['phone'] = message.text.strip()
    photo_id = data['photo']
    vin = data['vin']
    parts = ', '.join(data.get('parts', []))
    total = data['total']
    name = data['name']
    phone = data['phone']

    summary = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nVIN: {vin}\n–î–µ—Ç–∞–ª–∏: {parts}\n–°—É–º–º–∞: {total} ‚ÇΩ"
    bot.send_photo(ADMIN_CHAT_ID, photo_id, caption=summary)

    with open("–∑–∞—è–≤–∫–∏.csv", "a", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now(), name, phone, vin, parts, total])

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç—É.")
    user_data.pop(message.chat.id, None)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    threading.Thread(target=start_bot).start()
    app.run(host='0.0.0.0', port=10000)